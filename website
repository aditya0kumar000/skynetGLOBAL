<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Globe Network Redesign</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <style>
    html, body {
      margin: 0;
      padding: 0;
      background:  linear-gradient(135deg, #060610, #090912, #16213e);
      overflow-x: hidden;
      overflow-y: scroll;
      font-family: 'Poppins', sans-serif;
      height: 800vh;
    }

    canvas {
      position: fixed;
      top: 0; left: 0;
      width: 100vw;
      height: 100vh;
      display: block;
      z-index: 1;
      transition: opacity 0.5s, filter 0.3s;
    }

    #loader {
      position: fixed;
      top: 0; left: 0;
      width: 100vw; height: 100vh;
      background: #1e1f2f;
      color: #f1f1f1;
      z-index: 10;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      font-size: 1.2em;
      letter-spacing: 0.5px;
      animation: fadeIn 1s ease-in-out;
    }

    #company-name {
      font-size: 2em;
      font-weight: bold;
      margin-bottom: 20px;
      color: #fff;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      opacity: 0;
      z-index: 5;
      transition: fadeIn  9s ease, opacity 6s ease;
      pointer-events: none;
    }

    #company-name.reveal {
      opacity: 1;
      pointer-events: auto;
      animation: glitch 2s steps(2, end) ease-in-out infinite;
    }

    #company-name.shrink {
      top: 20px;
      left: 20px;
      transform: scale(0.6);
      opacity: 0.8;
      animation: none;
    }

    @keyframes glitch {
      0% { transform: translate(-50%, -50%) skew(0.5deg, 0.5deg); }
      20% { transform: translate(-48%, -52%) skew(-1deg, 0.8deg); }
      40% { transform: translate(-52%, -48%) skew(0.8deg, -0.6deg); }
      60% { transform: translate(-50%, -50%) skew(-0.5deg, 0.2deg); }
      80% { transform: translate(-51%, -49%) skew(0.4deg, -0.4deg); }
      100% { transform: translate(-50%, -50%) skew(0deg, 0deg); }
    }

    .dots {
      font-size: 2em;
      color: #d6d6f0;
      animation: bounce 1.2s infinite;
    }

    @keyframes bounce {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-8px); }
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    body::before {
      content: "";
      position: fixed;
      top: 0; left: 0;
      width: 100%;
      height: 100%;
      background-image:
        radial-gradient(white 1px, transparent 1px),
        radial-gradient(white 1px, transparent 1px);
      background-size: 60px 60px, 80px 80px;
      background-position: 0 0, 30px 30px;
      opacity: 0.08;
      z-index: 0;
      pointer-events: none;
    }

    .globe-blob {
      position: fixed;
      border-radius: 50%;
      background: radial-gradient(circle, #64c3ff55 0%, #00000000 80%);
      animation: float 15s ease-in-out infinite;
      z-index: 0;
      pointer-events: none;
      filter: blur(20px);
      opacity: 0.12;
    }

    .globe-blob:nth-child(1) {
      width: 300px;
      height: 300px;
      top: 20%;
      left: 10%;
      animation-delay: 0s;
    }

    .globe-blob:nth-child(2) {
      width: 400px;
      height: 400px;
      bottom: 15%;
      right: 8%;
      animation-delay: 3s;
    }

    .globe-blob:nth-child(3) {
      width: 200px;
      height: 200px;
      top: 60%;
      left: 40%;
      animation-delay: 6s;
    }

    @keyframes float {
      0% { transform: translateY(0px) scale(1); }
      50% { transform: translateY(-20px) scale(1.05); }
      100% { transform: translateY(0px) scale(1); }
    }

    .manifesto {
      position: fixed;
      top: 20px;
      right: 20px;
      background: rgba(255, 255, 255, 0.08);
      border: 1px solid rgba(255, 255, 255, 0.2);
      backdrop-filter: blur(10px);
      border-radius: 12px;
      padding: 12px 18px;
      color: #f0f0f0;
      font-size: 0.9em;
      z-index: 9999;
      font-weight: 500;
      box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    }

    @media (max-width: 768px) {
      .manifesto {
        font-size: 0.8em;
        padding: 10px 14px;
      }
    }
  </style>
</head>
<body>
  <div class="globe-blob"></div>
  <div class="globe-blob"></div>
  <div class="globe-blob"></div>

  <div id="loader">
    <div>Loading your global network</div>
    <div class="dots">...</div>
  </div>

  <canvas id="globe"></canvas>

  <a href="#" id="company-name">SKYNET GLOBAL CONSULTANT</a>
  <div class="manifesto">HORIZON by Skynet</div>

  <section id="next-section">
    <div class="card-wrapper"><div class="card">Card 1</div></div>
    <div class="card-wrapper"><div class="card">Card 2</div></div>
    <div class="card-wrapper"><div class="card">Card 3</div></div>
    <div class="card-wrapper"><div class="card">Card 4</div></div>
  </section>


  <script>
    const canvas = document.getElementById("globe");
    const ctx = canvas.getContext("2d");
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const loader = document.getElementById("loader");
    const nextSection = document.getElementById("next-section");
    const socialLinks = document.querySelectorAll(".socials a");
    const companyName = document.getElementById("company-name");

    const radius = 150;
    const POINT_COUNT = 50;
    const points = [];

    for (let i = 0; i < POINT_COUNT; i++) {
      let phi = Math.acos(2 * Math.random() - 1);
      let theta = 2 * Math.PI * Math.random();
      let x = radius * Math.sin(phi) * Math.cos(theta);
      let y = radius * Math.sin(phi) * Math.sin(theta);
      let z = radius * Math.cos(phi);
      points.push({ x, y, z, visible: false });
    }

    let zoom = 1;
    let blurAmount = 0;
    let globeOpacity = 1;

    function rotateY(p, angle) {
      let cos = Math.cos(angle), sin = Math.sin(angle);
      return {
        x: p.x * cos - p.z * sin,
        y: p.y,
        z: p.x * sin + p.z * cos
      };
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;
      const angle = Date.now() * 0.0003;
      const visiblePoints = points.filter(p => p.visible);

      const projected = visiblePoints.map(p => {
        const rotated = rotateY(p, angle);
        const scale = (300 / (300 + rotated.z)) * zoom;
        return {
          x: centerX + rotated.x * scale,
          y: centerY + rotated.y * scale,
          scale: scale
        };
      });

      for (let i = 0; i < projected.length; i++) {
        for (let j = i + 1; j < projected.length; j++) {
          const dx = projected[i].x - projected[j].x;
          const dy = projected[i].y - projected[j].y;
          const dist = Math.sqrt(dx * dx + dy * dy);
          if (dist < 100) {
            ctx.strokeStyle = `rgba(255, 255, 255, ${1 - dist / 100})`;
            ctx.lineWidth = 0.5;
            ctx.beginPath();
            ctx.moveTo(projected[i].x, projected[i].y);
            ctx.lineTo(projected[j].x, projected[j].y);
            ctx.stroke();
          }
        }
      }

      for (let p of projected) {
        ctx.beginPath();
        ctx.arc(p.x, p.y, 2 * p.scale, 0, Math.PI * 2);
        ctx.fillStyle = "#ffffff";
        ctx.shadowBlur = 6;
        ctx.shadowColor = "#ffffff";
        ctx.fill();
        ctx.shadowBlur = 0;
      }

      requestAnimationFrame(draw);
    }

    function startReveal() {
      companyName.classList.add("reveal");
      let index = 0;
      const interval = setInterval(() => {
        if (index < points.length) {
          points[index].visible = true;
          if (index === 0) {
            companyName.classList.remove("reveal");
            companyName.classList.add("shrink");
          }
          index++;
        } else {
          clearInterval(interval);
        }
      }, 100);
    }

    setTimeout(() => {
      loader.style.opacity = 0;
      setTimeout(() => loader.style.display = "none", 1000);
      startReveal();
      draw();
    }, 2500);
const cards = document.querySelectorAll('.card');

  const observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('visible');
      }
    });
  }, {
    threshold: 0.2
  });

  cards.forEach(card => {
    observer.observe(card);
  });
    window.addEventListener("scroll", () => {
      const scrollY = window.scrollY;
      zoom = 1 + scrollY / 1200;
      zoom = Math.min(3, zoom);
      blurAmount = Math.min(scrollY / 120, 6);
      canvas.style.filter = `blur(${blurAmount}px)`;

      if (scrollY > 600) {
        globeOpacity = 1 - (scrollY - 600) / 600;
        canvas.style.opacity = Math.max(0, globeOpacity);
      }

      if (scrollY > 1000) {
        nextSection.classList.add("active");
        socialLinks.forEach((link, i) => {
          setTimeout(() => link.classList.add("visible"), i * 300);
        });
      }
    });
      
  </script>
</body>
</html>
